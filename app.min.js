(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1

/**

1. Goal: Maximize
2: Objective: 2x + y = P
3: x + y >=2
4: y >= 0
5: x >= 0

----->>
x | y | s1 | s2 | s3 | P | C
1   1   -1    0    0   0   2
1   0    0    -1   0   0   0
0   1    0    0    -1  0   0
-2 -1   0     0    0   1   0


select pivot column x, because -2 is most negative

for each row: divide C by the pivot colums entry for that row

select smallest as the pivot row

divide by receprocal

use this row to make the pivot colums entry 0 for each other row

select another pivot unless no negative indicators (all but P,C)





*
 */

(function() {
  var SimplexFormer, SimplexSolver;

  SimplexFormer = require('./input');

  SimplexSolver = require('./solver');

  window.Simplex = (function() {
    function Simplex(div) {
      var button, input;
      input = new SimplexFormer("" + div + "Form");
      button = "" + div + "Button";
      $("#" + button).text('Start Solve');
      $("#" + button).click(function() {
        var solver;
        if (input.outputMatrix != null) {
          $("#" + button).off();
          console.log(input.outputMatrix);
          console.log(div);
          solver = new SimplexSolver(input.outputMatrix, div);
          return $("#" + button).text('Step Simplex');
        }
      });
    }

    return Simplex;

  })();


  /**
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  To define a simplex matrix is defined
  the first n columns of a row are for the variables
  the next n colums of a row are for slack variables
  the next column is for the P of the objective function
  the next column is for the constraint
  
  to make a solver and attach it to a div (with a unique ID!) do as follows:
  
  mySolver = new SimplexSolver(myMatrix, "myDivID");
  
  
    
  *
   */

}).call(this);

},{"./input":2,"./solver":4}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var SimplexFormer, jsepAST, linearMatrix,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  jsepAST = require('./parsers').jsepAST;

  linearMatrix = require('./parsers').linearMatrix;

  module.exports = SimplexFormer = (function() {
    function SimplexFormer(div) {
      this.div = div;
      this.outputMatrix = null;
      this.FormContext = {
        objFuncMessage: cjs.constraint(false),
        newConstraintFuncMessage: cjs.constraint(false),
        constraint: cjs.array([]),
        matrix: cjs.array([]),
        order: cjs.array([])
      };
      window.debugContext = this.FormContext;
      $((function(_this) {
        return function() {
          $("#" + _this.div).html(cjs.createTemplate($('#SimplexForm'), _this.FormContext));
          $("#new-constraint-add").on('click', function() {
            var res, resObjective;
            res = _this.validate(_this.FormContext.newConstraintFunc.get(), 'constraint');
            if (res) {
              _this.FormContext.constraint.push(res);
              resObjective = _this.validate(_this.FormContext.objFunc.get(), 'objective');
              return _this.toMatrix(resObjective, _this.FormContext.constraint.toArray());
            }
          });
          return cjs.liven(function() {
            _this.validate(_this.FormContext.newConstraintFunc.get(), 'constraint');
            return _this.validate(_this.FormContext.objFunc.get(), 'objective');
          });
        };
      })(this));
    }

    SimplexFormer.prototype.toMatrix = function(objective, constraints) {
      var col, matrix, matrixRow, objectiveName, order, preForm, row, varName, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      if (objective && typeof objective !== 'string' && constraints.length !== 0) {
        objectiveName = objective.res;
        preForm = new linearMatrix([objective]);
        objective = preForm.matrix[0];
        order = [];
        for (varName in objective) {
          if (varName !== objectiveName) {
            order.push(varName);
          }
        }
        preForm = new linearMatrix(constraints);
        constraints = preForm.matrix;
        for (_i = 0, _len = constraints.length; _i < _len; _i++) {
          row = constraints[_i];
          for (varName in row) {
            if (__indexOf.call(order, varName) < 0 && varName[0] !== '$' && varName !== 'constraint') {
              order.push(varName);
            }
          }
        }
        for (_j = 0, _len1 = constraints.length; _j < _len1; _j++) {
          row = constraints[_j];
          for (varName in row) {
            if (varName[0] === '$' && __indexOf.call(order, varName) < 0) {
              order.push(varName);
            }
          }
        }
        order.push(objectiveName);
        order.push('constraint');
        constraints.push(objective);
        matrix = [];
        for (_k = 0, _len2 = constraints.length; _k < _len2; _k++) {
          row = constraints[_k];
          matrixRow = [];
          for (_l = 0, _len3 = order.length; _l < _len3; _l++) {
            col = order[_l];
            if (row[col] == null) {
              row[col] = 0;
            }
            matrixRow.push(row[col]);
          }
          matrix.push(matrixRow);
        }
        this.FormContext.order.setValue(order);
        this.FormContext.matrix.setValue(matrix);
        return this.outputMatrix = matrix;
      }
    };

    SimplexFormer.prototype.validate = function(toValidate, type) {
      var e, parse, set, validateObj;
      if (type === 'constraint') {
        set = 'newConstraintFuncMessage';
      } else if (type === 'objective') {
        set = 'objFuncMessage';
      }
      if (set != null) {
        validateObj = {
          val: toValidate,
          e: null
        };
        try {
          return jsep(validateObj.val);
        } catch (_error) {
          e = _error;
          return validateObj.e = e.dedscription;
        } finally {
          if (validateObj.e != null) {
            this.FormContext[set].set(validateObj.e);
          } else {
            try {
              parse = new jsepAST(jsep(validateObj.val));
            } catch (_error) {
              e = _error;
              validateObj.e = e.message;
            } finally {
              if (validateObj.e != null) {
                this.FormContext[set].set(validateObj.e);
              } else {
                if (type === 'objective') {
                  if (/^[A-z]+$/.test(this.FormContext.objVar.get())) {
                    this.FormContext[set].set(false);
                    return {
                      expr: parse.string,
                      op: "e",
                      res: this.FormContext.objVar.get()
                    };
                  } else {
                    this.FormContext[set].set('Objective value must a variable name!');
                    return false;
                  }
                } else if (type === 'constraint') {
                  if (/^[\d]+$/.test(this.FormContext.newConstraintVal.get())) {
                    this.FormContext[set].set(false);
                    return {
                      expr: parse.string,
                      op: $('#newConstraintOp').children(':selected').first().val(),
                      res: this.FormContext.newConstraintVal.get()
                    };
                  } else {
                    this.FormContext[set].set('Constraint value must be a number!');
                    return false;
                  }
                } else {
                  this.FormContext[set].set('Something went wrong');
                  return false;
                }
              }
            }
          }
        }
      }
    };

    return SimplexFormer;

  })();

}).call(this);

},{"./parsers":3}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var jsepAST;

  exports.jsepAST = jsepAST = (function() {
    function jsepAST(AST) {
      this.string = '';
      this.toString(AST);
    }

    jsepAST.prototype.toString = function(AST) {
      if (AST.type === 'Literal') {
        return this._foundLiteral(AST);
      } else if (AST.type === 'Identifier') {
        return this._foundIdentifier(AST);
      } else if (AST.type === 'Compound') {
        return this._foundCompound(AST);
      } else if (AST.type === 'BinaryExpression') {
        return this._foundBinaryExpression(AST);
      } else {
        throw new Error("AST type not in ['Compound', 'BinaryExpression', 'Identifier', 'Literal']. Tip: 12x should be written as 12(x)");
      }
    };

    jsepAST.prototype._foundLiteral = function(AST) {
      return this.string += AST.value;
    };

    jsepAST.prototype._foundIdentifier = function(AST) {
      return this.string += AST.name;
    };

    jsepAST.prototype._foundCompound = function(AST) {
      var expression, _i, _len, _ref, _results;
      _ref = AST.body;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        expression = _ref[_i];
        _results.push(this.toString(expression));
      }
      return _results;
    };

    jsepAST.prototype._foundBinaryExpression = function(AST) {
      var _ref;
      if ((_ref = AST.operator) === '+' || _ref === '-') {
        this.toString(AST.left);
        this.string += " " + AST.operator + " ";
        return this.toString(AST.right);
      } else {
        throw new Error("Only expressions in ['+', '-'] are supported. Tip: 12*x should be written as 12(x)");
      }
    };

    return jsepAST;

  })();

  exports.linearMatrix = window.linearMatrix = (function() {
    function linearMatrix(linearArr) {

      /**
        equations of linearArr should look like:
        {
          expr: STRING
          op: #in ['lte', 'gte', 'e']
          res: STRING or Number
        }
        if the result is a string, op must equal 'e'
        if the result is a number op must equal 'lte' or 'gte'
      
      *
       */
      var equation, i, _i, _len;
      this.matrix = [];
      for (i = _i = 0, _len = linearArr.length; _i < _len; i = ++_i) {
        equation = linearArr[i];
        this.parse(equation, i, true);
      }
    }

    linearMatrix.prototype.parse = function(equation, i, toMatrix) {
      var NumValidate, NumVar, StrValidate, mode, negative, part, res, _i, _len, _ref, _ref1;
      if (toMatrix == null) {
        toMatrix = false;
      }
      NumVar = /^(\d+)?([A-z]+)$/;
      StrValidate = /^[A-z]+$/;
      NumValidate = /^[\d]+$/;
      this.matrix.push({});
      negative = false;
      if (equation.op === 'e' && StrValidate.test(equation.res)) {
        mode = 'objective';
      } else if (((_ref = equation.op) === 'lte' || _ref === 'gte') && NumValidate.test(equation.res)) {
        mode = 'constraint';
      }
      _ref1 = equation.expr.split(' ');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        part = _ref1[_i];
        res = NumVar.exec(part);
        if (res == null) {
          if (part === '-') {
            negative = true;
          }
          if (part === '+') {
            negative = false;
          }
        } else {
          if ((res[1] != null) && (res[2] != null)) {
            if (mode === 'objective') {
              res[1] = -res[1];
            }
            this.matrix[i][res[2]] = parseFloat(res[1]);
          } else if (res[1] != null) {
            if (mode === 'constraint') {
              if (negative) {
                equation.res = +res[1];
              } else {
                equation.res = -res[1];
              }
            } else if (mode === 'objective') {
              throw new Error('objective function not simplified!');
            }
          } else if (res[2] != null) {
            if (negative) {
              this.matrix[i][res[2]] = -1;
            } else {
              this.matrix[i][res[2]] = 1;
              this.matrix[i][res[2]] = 1;
            }
          }
        }
      }
      if (mode === 'constraint') {
        if (equation.op === 'lte') {
          this.matrix[i]["$0" + res[2]] = 1;
        } else if (equation.op === 'gte') {
          this.matrix[i]["$0" + res[2]] = -1;
        }
        return this.matrix[i]['constraint'] = parseInt(equation.res);
      } else if (mode === 'objective') {
        return this.matrix[i][equation.res] = 1;
      }
    };

    return linearMatrix;

  })();

}).call(this);

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = window.SimplexSolver = (function() {
    function SimplexSolver(matrix, div) {
      this.matrix = matrix;

      /**
        matrix is an arr of arr
        arr[0] returns the first row
        arr[0][0] returns the first elem in first row
      *
       */
      this.pivotCol = false;
      this.pivotRow = false;
      this.rowCount = this.matrix.length;
      this.colCount = this.matrix[0].length;
      this.indicatorRow = this.rowCount - 1;
      this.finshed = false;
      this.steps = ['selectPivot', 'selectPivotRow', 'normalizePivotRow', 'reducePivotColum'];
      this.stepCount = 0;
      this.start = true;
      if (div != null) {
        this.output = div;
        $("#" + div + "Button").on("click", (function(_this) {
          return function() {
            return _this.step();
          };
        })(this));
      }
    }

    SimplexSolver.prototype.print = function() {
      var i, row, _i, _len, _ref;
      $("#" + this.output).append("<pre>");
      _ref = this.matrix;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        row = _ref[i];
        $("#" + this.output).append("" + (JSON.stringify(this.matrix[i])) + "<br/>");
      }
      $("#" + this.output).append("</pre>");
      $("#" + this.output).append("PivotCol: " + this.pivotCol + "<br /> PivotRow: " + this.pivotRow + "<br /> Finshed: " + this.finshed + "</p>");
      $("#" + this.output).append("-----------------");
      if (!this.finshed) {
        return $("#" + this.output).append("<p> Step " + this.steps[this.stepCount] + ":\n </p><p>");
      }
    };

    SimplexSolver.prototype.selectPivot = function() {
      var elem, i, mostNegative, pivotCol, _i, _len, _ref;
      if (this.start) {
        this.pivotCol = 0;
        this.start = false;
        return;
      }
      mostNegative = Infinity;
      pivotCol = null;
      _ref = this.matrix[this.indicatorRow];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        elem = _ref[i];
        if (i < this.colCount - 2) {
          if (elem < mostNegative) {
            mostNegative = elem;
            pivotCol = i;
          }
        }
      }
      if (mostNegative < 0) {
        return this.pivotCol = pivotCol;
      } else {
        this.finshed = true;
        console.log(this.matrix);
        $("#" + this.output + "Button").text('Finshed');
        return $("#" + this.output + "Button").off();
      }
    };

    SimplexSolver.prototype.selectPivotRow = function() {
      var i, pivotRow, row, smallest, _i, _len, _ref;
      smallest = Infinity;
      pivotRow = null;
      _ref = this.matrix;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        row = _ref[i];
        if (i < this.rowCount - 1) {
          if (row[this.colCount - 1] / row[this.pivotCol] > 0) {
            if (row[this.colCount - 1] / row[this.pivotCol] < smallest) {
              smallest = row[this.colCount - 1] / row[this.pivotCol];
              pivotRow = i;
            }
          }
        }
      }
      this.pivotRow = pivotRow;
      if (this.pivotRow === null) {
        return this.finshed = true;
      }
    };

    SimplexSolver.prototype.normalizePivotRow = function() {
      var elem, i, receprocal, _i, _len, _ref, _results;
      receprocal = 1 / this.matrix[this.pivotRow][this.pivotCol];
      _ref = this.matrix[this.pivotRow];
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        elem = _ref[i];
        _results.push(this.matrix[this.pivotRow][i] = elem * receprocal);
      }
      return _results;
    };

    SimplexSolver.prototype.reducePivotColum = function() {
      var elem, i, j, multible, row, _i, _len, _ref, _results;
      _ref = this.matrix;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        row = _ref[i];
        if (!(i !== this.pivotRow)) {
          continue;
        }
        multible = this.matrix[i][this.pivotCol] / this.matrix[this.pivotRow][this.pivotCol];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.matrix[i];
          _results1 = [];
          for (j = _j = 0, _len1 = _ref1.length; _j < _len1; j = ++_j) {
            elem = _ref1[j];
            _results1.push(this.matrix[i][j] = elem - multible * this.matrix[this.pivotRow][j]);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    SimplexSolver.prototype.step = function() {
      console.log("Doing step " + this.steps[this.stepCount]);
      this[this.steps[this.stepCount]]();
      this.stepCount++;
      if (this.stepCount === this.steps.length) {
        this.stepCount = 0;
      }
      console.log(this);
      if (this.output != null) {
        return this.print();
      }
    };

    return SimplexSolver;

  })();

}).call(this);

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
